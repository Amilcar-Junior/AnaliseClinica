{"ast":null,"code":"/* eslint-disable no-useless-escape */\nimport { includes, mapKeys, reject } from 'lodash';\n/**\r\n * [validateInput description]\r\n * @param  {String || Number} value  Input's value\r\n * @param  {Object} inputValidations\r\n * @param  {String} [type='text']    Optionnal: the input's type only for email\r\n * @return {Array}                  Array of errors to be displayed\r\n */\n\nconst validateInput = (value, inputValidations = {}, type = 'text') => {\n  let errors = [];\n  const emailRegex = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/); // handle i18n\n\n  const requiredError = {\n    id: 'components.Input.error.validation.required'\n  };\n  mapKeys(inputValidations, (validationValue, validationKey) => {\n    switch (validationKey) {\n      case 'max':\n        if (parseInt(value, 10) > validationValue) {\n          errors.push(\"Não pode ser superior\");\n        }\n\n        break;\n\n      case 'maxLength':\n        if (value.length > validationValue) {\n          errors.push('Muito grande');\n        }\n\n        break;\n\n      case 'min':\n        if (parseInt(value, 10) < validationValue) {\n          errors.push(\"Não pode ser inferior\");\n        }\n\n        break;\n\n      case 'minLength':\n        if (value.length < validationValue) {\n          errors.push('muito pequeno');\n        }\n\n        break;\n\n      case 'required':\n        if (value.length === 0) {\n          errors.push('Este campo não pode ser vazio');\n        }\n\n        break;\n\n      case 'regex':\n        if (!new RegExp(validationValue).test(value)) {\n          errors.push('Não compativel');\n        }\n\n        break;\n\n      default:\n        errors = [];\n    }\n  });\n\n  if (type === 'email' && !emailRegex.test(value)) {\n    errors.push('Não é um email');\n  }\n\n  if (includes(errors, requiredError)) {\n    errors = reject(errors, error => error !== requiredError);\n  }\n\n  return errors;\n};\n\nexport default validateInput;","map":{"version":3,"sources":["C:/Users/amilc/Documents/GitHub/AnaliseClinica/Frontend/src/utils/inputsValidations.js"],"names":["includes","mapKeys","reject","validateInput","value","inputValidations","type","errors","emailRegex","RegExp","requiredError","id","validationValue","validationKey","parseInt","push","length","test","error"],"mappings":"AAAA;AACA,SAASA,QAAT,EAAmBC,OAAnB,EAA4BC,MAA5B,QAA0C,QAA1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,aAAa,GAAG,CAACC,KAAD,EAAQC,gBAAgB,GAAG,EAA3B,EAA+BC,IAAI,GAAG,MAAtC,KAAiD;AACrE,MAAIC,MAAM,GAAG,EAAb;AAEA,QAAMC,UAAU,GAAG,IAAIC,MAAJ,CACjB,yJADiB,CAAnB,CAHqE,CAMrE;;AACA,QAAMC,aAAa,GAAG;AAAEC,IAAAA,EAAE,EAAE;AAAN,GAAtB;AAEAV,EAAAA,OAAO,CAACI,gBAAD,EAAmB,CAACO,eAAD,EAAkBC,aAAlB,KAAoC;AAC5D,YAAQA,aAAR;AACE,WAAK,KAAL;AACE,YAAIC,QAAQ,CAACV,KAAD,EAAQ,EAAR,CAAR,GAAsBQ,eAA1B,EAA2C;AACzCL,UAAAA,MAAM,CAACQ,IAAP,CAAY,uBAAZ;AACD;;AACD;;AACF,WAAK,WAAL;AACE,YAAIX,KAAK,CAACY,MAAN,GAAeJ,eAAnB,EAAoC;AAClCL,UAAAA,MAAM,CAACQ,IAAP,CAAY,cAAZ;AACD;;AACD;;AACF,WAAK,KAAL;AACE,YAAID,QAAQ,CAACV,KAAD,EAAQ,EAAR,CAAR,GAAsBQ,eAA1B,EAA2C;AACzCL,UAAAA,MAAM,CAACQ,IAAP,CAAY,uBAAZ;AACD;;AACD;;AACF,WAAK,WAAL;AACE,YAAIX,KAAK,CAACY,MAAN,GAAeJ,eAAnB,EAAoC;AAClCL,UAAAA,MAAM,CAACQ,IAAP,CAAY,eAAZ;AACD;;AACD;;AACF,WAAK,UAAL;AACE,YAAIX,KAAK,CAACY,MAAN,KAAiB,CAArB,EAAwB;AACtBT,UAAAA,MAAM,CAACQ,IAAP,CAAY,+BAAZ;AACD;;AACD;;AACF,WAAK,OAAL;AACE,YAAI,CAAC,IAAIN,MAAJ,CAAWG,eAAX,EAA4BK,IAA5B,CAAiCb,KAAjC,CAAL,EAA8C;AAC5CG,UAAAA,MAAM,CAACQ,IAAP,CAAY,gBAAZ;AACD;;AACD;;AACF;AACER,QAAAA,MAAM,GAAG,EAAT;AAhCJ;AAkCD,GAnCM,CAAP;;AAqCA,MAAID,IAAI,KAAK,OAAT,IAAoB,CAACE,UAAU,CAACS,IAAX,CAAgBb,KAAhB,CAAzB,EAAiD;AAC/CG,IAAAA,MAAM,CAACQ,IAAP,CAAY,gBAAZ;AACD;;AAED,MAAIf,QAAQ,CAACO,MAAD,EAASG,aAAT,CAAZ,EAAqC;AACnCH,IAAAA,MAAM,GAAGL,MAAM,CAACK,MAAD,EAASW,KAAK,IAAIA,KAAK,KAAKR,aAA5B,CAAf;AACD;;AAED,SAAOH,MAAP;AACD,CAvDD;;AAyDA,eAAeJ,aAAf","sourcesContent":["/* eslint-disable no-useless-escape */\r\nimport { includes, mapKeys, reject } from 'lodash';\r\n/**\r\n * [validateInput description]\r\n * @param  {String || Number} value  Input's value\r\n * @param  {Object} inputValidations\r\n * @param  {String} [type='text']    Optionnal: the input's type only for email\r\n * @return {Array}                  Array of errors to be displayed\r\n */\r\nconst validateInput = (value, inputValidations = {}, type = 'text') => {\r\n  let errors = [];\r\n\r\n  const emailRegex = new RegExp(\r\n    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n  );\r\n  // handle i18n\r\n  const requiredError = { id: 'components.Input.error.validation.required' };\r\n\r\n  mapKeys(inputValidations, (validationValue, validationKey) => {\r\n    switch (validationKey) {\r\n      case 'max':\r\n        if (parseInt(value, 10) > validationValue) {\r\n          errors.push(\"Não pode ser superior\");\r\n        }\r\n        break;\r\n      case 'maxLength':\r\n        if (value.length > validationValue) {\r\n          errors.push('Muito grande');\r\n        }\r\n        break;\r\n      case 'min':\r\n        if (parseInt(value, 10) < validationValue) {\r\n          errors.push(\"Não pode ser inferior\");\r\n        }\r\n        break;\r\n      case 'minLength':\r\n        if (value.length < validationValue) {\r\n          errors.push('muito pequeno');\r\n        }\r\n        break;\r\n      case 'required':\r\n        if (value.length === 0) {\r\n          errors.push('Este campo não pode ser vazio');\r\n        }\r\n        break;\r\n      case 'regex':\r\n        if (!new RegExp(validationValue).test(value)) {\r\n          errors.push('Não compativel');\r\n        }\r\n        break;\r\n      default:\r\n        errors = [];\r\n    }\r\n  });\r\n\r\n  if (type === 'email' && !emailRegex.test(value)) {\r\n    errors.push('Não é um email');\r\n  }\r\n\r\n  if (includes(errors, requiredError)) {\r\n    errors = reject(errors, error => error !== requiredError);\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport default validateInput;\r\n"]},"metadata":{},"sourceType":"module"}