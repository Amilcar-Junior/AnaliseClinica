{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amilc\\\\Documents\\\\GitHub\\\\AnaliseClinica\\\\Frontend\\\\src\\\\components\\\\Login\\\\InputPasswordWithErrors\\\\index.js\";\n\n/**\r\n *\r\n * InputPasswordWithErrors\r\n *\r\n */\n\n/* eslint-disable no-mixed-operators */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { isEmpty, isFunction } from 'lodash';\nimport cn from 'classnames'; // Design\n\nimport Label from '../Label';\nimport InputDescription from '../InputDescription';\nimport InputErrors from '../InputErrors';\nimport InputPassword from '../InputPassword'; // Utils\n\nimport validateInput from '../../../utils/inputsValidations';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass InputPasswordWithErrors extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      errors: [],\n      hasInitialValue: false\n    };\n\n    this.handleBlur = ({\n      target\n    }) => {\n      // Prevent from displaying error if the input is initially isEmpty\n      if (!isEmpty(target.value) || this.state.hasInitialValue) {\n        const errors = validateInput(target.value, this.props.validations);\n        this.setState({\n          errors,\n          hasInitialValue: true\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    const {\n      value,\n      errors\n    } = this.props; // Prevent the input from displaying an error when the user enters and leaves without filling it\n\n    if (!isEmpty(value)) {\n      this.setState({\n        hasInitialValue: true\n      });\n    } // Display input error if it already has some\n\n\n    if (!isEmpty(errors)) {\n      this.setState({\n        errors\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // Show required error if the input's value is received after the compo is mounted\n    if (!isEmpty(nextProps.value) && !this.state.hasInitialValue) {\n      this.setState({\n        hasInitialValue: true\n      });\n    } // Check if errors have been updated during validations\n\n\n    if (nextProps.didCheckErrors !== this.props.didCheckErrors) {\n      // Remove from the state the errors that have already been set\n      const errors = isEmpty(nextProps.errors) ? [] : nextProps.errors;\n      this.setState({\n        errors\n      });\n    }\n  }\n  /**\r\n   * Set the errors depending on the validations given to the input\r\n   * @param  {Object} target\r\n   */\n\n\n  render() {\n    const {\n      autoFocus,\n      deactivateErrorHighlight,\n      disabled,\n      errorsClassName,\n      errorsStyle,\n      inputClassName,\n      inputDescriptionClassName,\n      inputDescriptionStyle,\n      inputStyle,\n      labelClassName,\n      labelStyle,\n      name,\n      onChange,\n      onFocus,\n      placeholder,\n      style,\n      tabIndex,\n      value\n    } = this.props;\n    const handleBlur = isFunction(this.props.onBlur) ? this.props.onBlur : this.handleBlur;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cn('inputPasswordWithErrors', this.props.customBootstrapClass, !isEmpty(this.props.className) && this.props.className),\n      style: style,\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        className: labelClassName,\n        htmlFor: name,\n        message: this.props.label,\n        style: labelStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputPassword, {\n        autoFocus: autoFocus,\n        className: inputClassName,\n        disabled: disabled,\n        deactivateErrorHighlight: deactivateErrorHighlight,\n        error: !isEmpty(this.state.errors),\n        name: name,\n        onBlur: handleBlur,\n        onChange: onChange,\n        onFocus: onFocus,\n        placeholder: placeholder,\n        style: inputStyle,\n        tabIndex: tabIndex,\n        value: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputDescription, {\n        className: inputDescriptionClassName,\n        message: this.props.inputDescription,\n        style: inputDescriptionStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputErrors, {\n        className: errorsClassName,\n        errors: this.state.errors,\n        style: errorsStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nInputPasswordWithErrors.defaultProps = {\n  autoFocus: false,\n  className: '',\n  customBootstrapClass: 'col-md-6',\n  deactivateErrorHighlight: false,\n  didCheckErrors: false,\n  disabled: false,\n  onBlur: false,\n  onFocus: () => {},\n  errors: [],\n  errorsClassName: '',\n  errorsStyle: {},\n  inputClassName: '',\n  inputDescription: '',\n  inputDescriptionClassName: '',\n  inputDescriptionStyle: {},\n  inputStyle: {},\n  label: '',\n  labelClassName: '',\n  labelStyle: {},\n  placeholder: '',\n  style: {},\n  tabIndex: '0',\n  validations: {}\n};\nInputPasswordWithErrors.propTypes = {\n  autoFocus: PropTypes.bool,\n  className: PropTypes.string,\n  customBootstrapClass: PropTypes.string,\n  deactivateErrorHighlight: PropTypes.bool,\n  didCheckErrors: PropTypes.bool,\n  disabled: PropTypes.bool,\n  errors: PropTypes.array,\n  errorsClassName: PropTypes.string,\n  errorsStyle: PropTypes.object,\n  inputClassName: PropTypes.string,\n  inputDescription: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.shape({\n    id: PropTypes.string,\n    params: PropTypes.object\n  })]),\n  inputDescriptionClassName: PropTypes.string,\n  inputDescriptionStyle: PropTypes.object,\n  inputStyle: PropTypes.object,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.shape({\n    id: PropTypes.string,\n    params: PropTypes.object\n  })]),\n  labelClassName: PropTypes.string,\n  labelStyle: PropTypes.object,\n  name: PropTypes.string.isRequired,\n  onBlur: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n  onChange: PropTypes.func.isRequired,\n  onFocus: PropTypes.func,\n  placeholder: PropTypes.string,\n  style: PropTypes.object,\n  tabIndex: PropTypes.string,\n  validations: PropTypes.object,\n  value: PropTypes.string.isRequired\n};\nexport default InputPasswordWithErrors;","map":{"version":3,"sources":["C:/Users/amilc/Documents/GitHub/AnaliseClinica/Frontend/src/components/Login/InputPasswordWithErrors/index.js"],"names":["React","PropTypes","isEmpty","isFunction","cn","Label","InputDescription","InputErrors","InputPassword","validateInput","InputPasswordWithErrors","Component","state","errors","hasInitialValue","handleBlur","target","value","props","validations","setState","componentDidMount","componentWillReceiveProps","nextProps","didCheckErrors","render","autoFocus","deactivateErrorHighlight","disabled","errorsClassName","errorsStyle","inputClassName","inputDescriptionClassName","inputDescriptionStyle","inputStyle","labelClassName","labelStyle","name","onChange","onFocus","placeholder","style","tabIndex","onBlur","customBootstrapClass","className","label","inputDescription","defaultProps","propTypes","bool","string","array","object","oneOfType","func","shape","id","params","isRequired"],"mappings":"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","sourcesContent":["/**\r\n *\r\n * InputPasswordWithErrors\r\n *\r\n */\r\n\r\n/* eslint-disable no-mixed-operators */\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { isEmpty, isFunction } from 'lodash';\r\nimport cn from 'classnames';\r\n\r\n// Design\r\nimport Label from '../Label';\r\nimport InputDescription from '../InputDescription';\r\nimport InputErrors from '../InputErrors';\r\nimport InputPassword from '../InputPassword';\r\n\r\n// Utils\r\nimport validateInput from '../../../utils/inputsValidations';\r\n\r\nimport './styles.css';\r\n\r\nclass InputPasswordWithErrors extends React.Component {\r\n  state = { errors: [], hasInitialValue: false };\r\n\r\n  componentDidMount() {\r\n    const { value, errors } = this.props;\r\n\r\n    // Prevent the input from displaying an error when the user enters and leaves without filling it\r\n    if (!isEmpty(value)) {\r\n      this.setState({ hasInitialValue: true });\r\n    }\r\n\r\n    // Display input error if it already has some\r\n    if (!isEmpty(errors)) {\r\n      this.setState({ errors });\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    // Show required error if the input's value is received after the compo is mounted\r\n    if (!isEmpty(nextProps.value) && !this.state.hasInitialValue) {\r\n      this.setState({ hasInitialValue: true });\r\n    }\r\n\r\n    // Check if errors have been updated during validations\r\n    if (nextProps.didCheckErrors !== this.props.didCheckErrors) {\r\n      // Remove from the state the errors that have already been set\r\n      const errors = isEmpty(nextProps.errors) ? [] : nextProps.errors;\r\n      this.setState({ errors });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the errors depending on the validations given to the input\r\n   * @param  {Object} target\r\n   */\r\n  handleBlur = ({ target }) => {\r\n    // Prevent from displaying error if the input is initially isEmpty\r\n    if (!isEmpty(target.value) || this.state.hasInitialValue) {\r\n      const errors = validateInput(target.value, this.props.validations);\r\n      this.setState({ errors, hasInitialValue: true });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      autoFocus,\r\n      deactivateErrorHighlight,\r\n      disabled,\r\n      errorsClassName,\r\n      errorsStyle,\r\n      inputClassName,\r\n      inputDescriptionClassName,\r\n      inputDescriptionStyle,\r\n      inputStyle,\r\n      labelClassName,\r\n      labelStyle,\r\n      name,\r\n      onChange,\r\n      onFocus,\r\n      placeholder,\r\n      style,\r\n      tabIndex,\r\n      value,\r\n    } = this.props;\r\n    const handleBlur = isFunction(this.props.onBlur)\r\n      ? this.props.onBlur\r\n      : this.handleBlur;\r\n\r\n    return (\r\n      <div\r\n        className={cn(\r\n          'inputPasswordWithErrors',\r\n          this.props.customBootstrapClass,\r\n          !isEmpty(this.props.className) && this.props.className\r\n        )}\r\n        style={style}\r\n      >\r\n        <Label\r\n          className={labelClassName}\r\n          htmlFor={name}\r\n          message={this.props.label}\r\n          style={labelStyle}\r\n        />\r\n        <InputPassword\r\n          autoFocus={autoFocus}\r\n          className={inputClassName}\r\n          disabled={disabled}\r\n          deactivateErrorHighlight={deactivateErrorHighlight}\r\n          error={!isEmpty(this.state.errors)}\r\n          name={name}\r\n          onBlur={handleBlur}\r\n          onChange={onChange}\r\n          onFocus={onFocus}\r\n          placeholder={placeholder}\r\n          style={inputStyle}\r\n          tabIndex={tabIndex}\r\n          value={value}\r\n        />\r\n        <InputDescription\r\n          className={inputDescriptionClassName}\r\n          message={this.props.inputDescription}\r\n          style={inputDescriptionStyle}\r\n        />\r\n        <InputErrors\r\n          className={errorsClassName}\r\n          errors={this.state.errors}\r\n          style={errorsStyle}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nInputPasswordWithErrors.defaultProps = {\r\n  autoFocus: false,\r\n  className: '',\r\n  customBootstrapClass: 'col-md-6',\r\n  deactivateErrorHighlight: false,\r\n  didCheckErrors: false,\r\n  disabled: false,\r\n  onBlur: false,\r\n  onFocus: () => {},\r\n  errors: [],\r\n  errorsClassName: '',\r\n  errorsStyle: {},\r\n  inputClassName: '',\r\n  inputDescription: '',\r\n  inputDescriptionClassName: '',\r\n  inputDescriptionStyle: {},\r\n  inputStyle: {},\r\n  label: '',\r\n  labelClassName: '',\r\n  labelStyle: {},\r\n  placeholder: '',\r\n  style: {},\r\n  tabIndex: '0',\r\n  validations: {},\r\n};\r\n\r\nInputPasswordWithErrors.propTypes = {\r\n  autoFocus: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  customBootstrapClass: PropTypes.string,\r\n  deactivateErrorHighlight: PropTypes.bool,\r\n  didCheckErrors: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n  errors: PropTypes.array,\r\n  errorsClassName: PropTypes.string,\r\n  errorsStyle: PropTypes.object,\r\n  inputClassName: PropTypes.string,\r\n  inputDescription: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.func,\r\n    PropTypes.shape({\r\n      id: PropTypes.string,\r\n      params: PropTypes.object,\r\n    }),\r\n  ]),\r\n  inputDescriptionClassName: PropTypes.string,\r\n  inputDescriptionStyle: PropTypes.object,\r\n  inputStyle: PropTypes.object,\r\n  label: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.func,\r\n    PropTypes.shape({\r\n      id: PropTypes.string,\r\n      params: PropTypes.object,\r\n    }),\r\n  ]),\r\n  labelClassName: PropTypes.string,\r\n  labelStyle: PropTypes.object,\r\n  name: PropTypes.string.isRequired,\r\n  onBlur: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\r\n  onChange: PropTypes.func.isRequired,\r\n  onFocus: PropTypes.func,\r\n  placeholder: PropTypes.string,\r\n  style: PropTypes.object,\r\n  tabIndex: PropTypes.string,\r\n  validations: PropTypes.object,\r\n  value: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default InputPasswordWithErrors;\r\n"]},"metadata":{},"sourceType":"module"}