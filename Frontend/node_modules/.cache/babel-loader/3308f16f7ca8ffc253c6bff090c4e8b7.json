{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amilc\\\\Documents\\\\GitHub\\\\AnaliseClinica\\\\Frontend\\\\src\\\\containers\\\\AuthPage\\\\index.js\";\n\n/**\r\n *\r\n * AuthPage\r\n *\r\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { findIndex, get, map, replace, set } from 'lodash';\nimport { Link } from 'react-router-dom';\nimport FormDivider from '../../components/Login/FormDivider';\nimport Input from '../../components/Login/InputsIndex';\nimport SocialLink from '../../components/Login/SocialLink'; // Utils\n\nimport auth from '../../utils/auth';\nimport request from '../../utils/request';\nimport { addUser } from '../../conection/profile/actions';\nimport form from './forms.json';\nimport './styles.css';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AuthPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      value: {},\n      errors: [],\n      didCheckErrors: false\n    };\n\n    this.getRequestURL = () => {\n      let requestURL;\n\n      switch (this.props.match.params.authType) {\n        case 'login':\n          requestURL = process.env.REACT_APP_SERVER_URL + '/auth/local';\n          break;\n\n        case 'reset-password':\n          requestURL = process.env.REACT_APP_SERVER_URL + '/auth/reset-password';\n          break;\n\n        case 'forgot-password':\n          requestURL = process.env.REACT_APP_SERVER_URL + '/auth/forgot-password';\n          break;\n\n        default:\n      }\n\n      return requestURL;\n    };\n\n    this.generateForm = props => {\n      const params = props.location.search ? replace(props.location.search, '?code=', '') : props.match.params.id;\n      this.setForm(props.match.params.authType, params);\n    };\n\n    this.handleChange = ({\n      target\n    }) => this.setState({\n      value: { ...this.state.value,\n        [target.name]: target.value\n      }\n    });\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      const body = this.state.value;\n      const requestURL = this.getRequestURL(); // This line is required for the callback url to redirect your user to app\n\n      if (this.props.match.params.authType === 'forgot-password') {\n        set(body, 'url', process.env.REACT_APP_APP_URL + '/auth/reset-password');\n      }\n\n      request(requestURL, {\n        method: 'POST',\n        body: this.state.value\n      }).then(response => {\n        auth.setToken(response.jwt, body.rememberMe);\n        auth.setUserInfo(response.user, body.rememberMe);\n        auth.setHeaderAuthorization(response.jwt);\n        this.props.addUser(response.user);\n        this.redirectUser();\n      }).catch(err => {\n        // TODO handle errors for other views\n        // This is just an example\n        const errors = [{\n          name: 'identifier',\n          errors: ['Email ou password errada']\n        }];\n        this.setState({\n          didCheckErrors: !this.state.didCheckErrors,\n          errors\n        });\n      });\n    };\n\n    this.redirectUser = () => {\n      this.props.history.push('/home-page-adm');\n    };\n\n    this.setForm = (formType, email) => {\n      const value = get(form, ['data', formType], {});\n\n      if (formType === 'reset-password') {\n        set(value, 'code', email);\n      }\n\n      this.setState({\n        value\n      });\n    };\n\n    this.renderLink = () => {\n      if (this.props.match.params.authType === 'login') {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/auth/forgot-password\",\n            children: \"Esqueceu sua Senha?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 9\n        }, this);\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.generateForm(this.props);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.match.params.authType !== this.props.match.params.authType) {\n      this.generateForm(nextProps);\n    }\n  }\n\n  render() {\n    const divStyle = this.props.match.params.authType === 'register' ? {\n      marginTop: '3.2rem'\n    } : {\n      marginTop: '.9rem'\n    };\n    const inputs = get(form, ['views', this.props.match.params.authType]);\n    const providers = []; // To remove a provider from the list just delete it from this array...\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"authPage\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"headerContainer\",\n            children: this.props.match.params.authType === 'register' ? /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Bem Vindo !\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 15\n            }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Entrar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"headerDescription\",\n            children: this.props.match.params.authType === 'register' ? /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Por favor registe para poder ter acesso as informa\\xE7\\xF5es\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 15\n            }, this) : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"formContainer\",\n            style: divStyle,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"container-fluid\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"row\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-md-12\",\n                  children: providers.map(provider => /*#__PURE__*/_jsxDEV(SocialLink, {\n                    provider: provider\n                  }, provider, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 161,\n                    columnNumber: 21\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(FormDivider, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n                onSubmit: this.handleSubmit,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"row\",\n                  style: {\n                    textAlign: 'start'\n                  },\n                  children: [map(inputs, (input, key) => /*#__PURE__*/_jsxDEV(Input, {\n                    autoFocus: key === 0,\n                    customBootstrapClass: get(input, 'customBootstrapClass'),\n                    didCheckErrors: this.state.didCheckErrors,\n                    errors: get(this.state.errors, [findIndex(this.state.errors, ['name', input.name]), 'errors'], []),\n                    label: get(input, 'label'),\n                    name: get(input, 'name'),\n                    onChange: this.handleChange,\n                    placeholder: get(input, 'placeholder'),\n                    type: get(input, 'type'),\n                    validations: {\n                      required: true\n                    },\n                    value: get(this.state.value, get(input, 'name'), '')\n                  }, get(input, 'name'), false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 169,\n                    columnNumber: 21\n                  }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"col-md-12 buttonContainer\",\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      class: \"btn btn-primary\",\n                      type: \"submit\",\n                      value: \"Sign in\",\n                      style: {\n                        width: '100%'\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 193,\n                      columnNumber: 21\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 191,\n                    columnNumber: 19\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"linkContainer\",\n            children: this.renderLink()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nAuthPage.defaultProps = {};\nAuthPage.propTypes = {\n  location: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired\n};\nexport default connect(null, {\n  addUser\n})(AuthPage);","map":{"version":3,"sources":["C:/Users/amilc/Documents/GitHub/AnaliseClinica/Frontend/src/containers/AuthPage/index.js"],"names":["React","PropTypes","findIndex","get","map","replace","set","Link","FormDivider","Input","SocialLink","auth","request","addUser","form","connect","AuthPage","Component","state","value","errors","didCheckErrors","getRequestURL","requestURL","props","match","params","authType","process","env","REACT_APP_SERVER_URL","generateForm","location","search","id","setForm","handleChange","target","setState","name","handleSubmit","e","preventDefault","body","REACT_APP_APP_URL","method","then","response","setToken","jwt","rememberMe","setUserInfo","user","setHeaderAuthorization","redirectUser","catch","err","history","push","formType","email","renderLink","componentDidMount","componentWillReceiveProps","nextProps","render","divStyle","marginTop","inputs","providers","provider","textAlign","input","key","required","width","defaultProps","propTypes","object","isRequired"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,OAA9B,EAAuCC,GAAvC,QAAkD,QAAlD;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,OAAOC,KAAP,MAAkB,oCAAlB;AACA,OAAOC,UAAP,MAAuB,mCAAvB,C,CAEA;;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,SAASC,OAAT,QAAwB,iCAAxB;AAEA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAO,cAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;;;AAEA,MAAMC,QAAN,SAAuBhB,KAAK,CAACiB,SAA7B,CAAuC;AAAA;AAAA;AAAA,SACrCC,KADqC,GAC7B;AAAEC,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,MAAM,EAAE,EAArB;AAAyBC,MAAAA,cAAc,EAAE;AAAzC,KAD6B;;AAAA,SAarCC,aAbqC,GAarB,MAAM;AACpB,UAAIC,UAAJ;;AAEA,cAAQ,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,QAAhC;AACE,aAAK,OAAL;AACEJ,UAAAA,UAAU,GAAGK,OAAO,CAACC,GAAR,CAAYC,oBAAZ,GAAiC,aAA9C;AACA;;AACF,aAAK,gBAAL;AACEP,UAAAA,UAAU,GAAGK,OAAO,CAACC,GAAR,CAAYC,oBAAZ,GAAiC,sBAA9C;AACA;;AACF,aAAK,iBAAL;AACEP,UAAAA,UAAU,GAAGK,OAAO,CAACC,GAAR,CAAYC,oBAAZ,GAAiC,uBAA9C;AACA;;AACF;AAVF;;AAaA,aAAOP,UAAP;AACD,KA9BoC;;AAAA,SAgCrCQ,YAhCqC,GAgCtBP,KAAK,IAAI;AACtB,YAAME,MAAM,GAAGF,KAAK,CAACQ,QAAN,CAAeC,MAAf,GACX5B,OAAO,CAACmB,KAAK,CAACQ,QAAN,CAAeC,MAAhB,EAAwB,QAAxB,EAAkC,EAAlC,CADI,GAEXT,KAAK,CAACC,KAAN,CAAYC,MAAZ,CAAmBQ,EAFvB;AAGA,WAAKC,OAAL,CAAaX,KAAK,CAACC,KAAN,CAAYC,MAAZ,CAAmBC,QAAhC,EAA0CD,MAA1C;AACD,KArCoC;;AAAA,SAuCrCU,YAvCqC,GAuCtB,CAAC;AAAEC,MAAAA;AAAF,KAAD,KACb,KAAKC,QAAL,CAAc;AACZnB,MAAAA,KAAK,EAAE,EAAE,GAAG,KAAKD,KAAL,CAAWC,KAAhB;AAAuB,SAACkB,MAAM,CAACE,IAAR,GAAeF,MAAM,CAAClB;AAA7C;AADK,KAAd,CAxCmC;;AAAA,SA4CrCqB,YA5CqC,GA4CtBC,CAAC,IAAI;AAClBA,MAAAA,CAAC,CAACC,cAAF;AACA,YAAMC,IAAI,GAAG,KAAKzB,KAAL,CAAWC,KAAxB;AACA,YAAMI,UAAU,GAAG,KAAKD,aAAL,EAAnB,CAHkB,CAKlB;;AACA,UAAI,KAAKE,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,QAAxB,KAAqC,iBAAzC,EAA4D;AAC1DrB,QAAAA,GAAG,CAACqC,IAAD,EAAO,KAAP,EAAcf,OAAO,CAACC,GAAR,CAAYe,iBAAZ,GAAgC,sBAA9C,CAAH;AACD;;AAEDhC,MAAAA,OAAO,CAACW,UAAD,EAAa;AAAEsB,QAAAA,MAAM,EAAE,MAAV;AAAkBF,QAAAA,IAAI,EAAE,KAAKzB,KAAL,CAAWC;AAAnC,OAAb,CAAP,CACG2B,IADH,CACQC,QAAQ,IAAI;AAChBpC,QAAAA,IAAI,CAACqC,QAAL,CAAcD,QAAQ,CAACE,GAAvB,EAA4BN,IAAI,CAACO,UAAjC;AACAvC,QAAAA,IAAI,CAACwC,WAAL,CAAiBJ,QAAQ,CAACK,IAA1B,EAAgCT,IAAI,CAACO,UAArC;AACAvC,QAAAA,IAAI,CAAC0C,sBAAL,CAA4BN,QAAQ,CAACE,GAArC;AACA,aAAKzB,KAAL,CAAWX,OAAX,CAAmBkC,QAAQ,CAACK,IAA5B;AACA,aAAKE,YAAL;AACD,OAPH,EAQGC,KARH,CAQSC,GAAG,IAAI;AACZ;AACA;AACA,cAAMpC,MAAM,GAAG,CACb;AAAEmB,UAAAA,IAAI,EAAE,YAAR;AAAsBnB,UAAAA,MAAM,EAAE,CAAC,0BAAD;AAA9B,SADa,CAAf;AAGA,aAAKkB,QAAL,CAAc;AAAEjB,UAAAA,cAAc,EAAE,CAAC,KAAKH,KAAL,CAAWG,cAA9B;AAA8CD,UAAAA;AAA9C,SAAd;AACD,OAfH;AAgBD,KAtEoC;;AAAA,SAwErCkC,YAxEqC,GAwEtB,MAAM;AACnB,WAAK9B,KAAL,CAAWiC,OAAX,CAAmBC,IAAnB,CAAwB,gBAAxB;AACD,KA1EoC;;AAAA,SAiFrCvB,OAjFqC,GAiF3B,CAACwB,QAAD,EAAWC,KAAX,KAAqB;AAC7B,YAAMzC,KAAK,GAAGhB,GAAG,CAACW,IAAD,EAAO,CAAC,MAAD,EAAS6C,QAAT,CAAP,EAA2B,EAA3B,CAAjB;;AAEA,UAAIA,QAAQ,KAAK,gBAAjB,EAAmC;AACjCrD,QAAAA,GAAG,CAACa,KAAD,EAAQ,MAAR,EAAgByC,KAAhB,CAAH;AACD;;AACD,WAAKtB,QAAL,CAAc;AAAEnB,QAAAA;AAAF,OAAd;AACD,KAxFoC;;AAAA,SA8FrC0C,UA9FqC,GA8FxB,MAAM;AACjB,UAAI,KAAKrC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,QAAxB,KAAqC,OAAzC,EAAkD;AAChD,4BACE;AAAA,iCACE,QAAC,IAAD;AAAM,YAAA,EAAE,EAAC,uBAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF;AAKD;AAEF,KAvGoC;AAAA;;AAGrCmC,EAAAA,iBAAiB,GAAG;AAClB,SAAK/B,YAAL,CAAkB,KAAKP,KAAvB;AACD;;AAEDuC,EAAAA,yBAAyB,CAACC,SAAD,EAAY;AACnC,QAAIA,SAAS,CAACvC,KAAV,CAAgBC,MAAhB,CAAuBC,QAAvB,KAAoC,KAAKH,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,QAAhE,EAA0E;AACxE,WAAKI,YAAL,CAAkBiC,SAAlB;AACD;AACF;;AA8FDC,EAAAA,MAAM,GAAG;AACP,UAAMC,QAAQ,GACZ,KAAK1C,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,QAAxB,KAAqC,UAArC,GACI;AAAEwC,MAAAA,SAAS,EAAE;AAAb,KADJ,GAEI;AAAEA,MAAAA,SAAS,EAAE;AAAb,KAHN;AAIA,UAAMC,MAAM,GAAGjE,GAAG,CAACW,IAAD,EAAO,CAAC,OAAD,EAAU,KAAKU,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,QAAlC,CAAP,CAAlB;AACA,UAAM0C,SAAS,GAAG,EAAlB,CANO,CAMe;;AAEtB,wBACE;AAAA,6BACA;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,SAAf;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC,iBAAf;AAAA,sBACG,KAAK7C,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,QAAxB,KAAqC,UAArC,gBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADD,gBAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,kBADF,eAQE;AAAK,YAAA,SAAS,EAAC,mBAAf;AAAA,sBACG,KAAKH,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,QAAxB,KAAqC,UAArC,gBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADD,GAGC;AAJJ;AAAA;AAAA;AAAA;AAAA,kBARF,eAeE;AAAK,YAAA,SAAS,EAAC,eAAf;AAA+B,YAAA,KAAK,EAAEuC,QAAtC;AAAA,mCACE;AAAK,cAAA,SAAS,EAAC,iBAAf;AAAA,sCACE;AAAK,gBAAA,SAAS,EAAC,KAAf;AAAA,uCACE;AAAK,kBAAA,SAAS,EAAC,WAAf;AAAA,4BACGG,SAAS,CAACjE,GAAV,CAAckE,QAAQ,iBACrB,QAAC,UAAD;AAAY,oBAAA,QAAQ,EAAEA;AAAtB,qBAAqCA,QAArC;AAAA;AAAA;AAAA;AAAA,0BADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBADF,eAQE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,sBARF,eASE;AAAM,gBAAA,QAAQ,EAAE,KAAK9B,YAArB;AAAA,uCACE;AAAK,kBAAA,SAAS,EAAC,KAAf;AAAqB,kBAAA,KAAK,EAAE;AAAE+B,oBAAAA,SAAS,EAAE;AAAb,mBAA5B;AAAA,6BACGnE,GAAG,CAACgE,MAAD,EAAS,CAACI,KAAD,EAAQC,GAAR,kBACX,QAAC,KAAD;AACE,oBAAA,SAAS,EAAEA,GAAG,KAAK,CADrB;AAEE,oBAAA,oBAAoB,EAAEtE,GAAG,CAACqE,KAAD,EAAQ,sBAAR,CAF3B;AAGE,oBAAA,cAAc,EAAE,KAAKtD,KAAL,CAAWG,cAH7B;AAIE,oBAAA,MAAM,EAAElB,GAAG,CACT,KAAKe,KAAL,CAAWE,MADF,EAET,CACElB,SAAS,CAAC,KAAKgB,KAAL,CAAWE,MAAZ,EAAoB,CAAC,MAAD,EAASoD,KAAK,CAACjC,IAAf,CAApB,CADX,EAEE,QAFF,CAFS,EAMT,EANS,CAJb;AAaE,oBAAA,KAAK,EAAEpC,GAAG,CAACqE,KAAD,EAAQ,OAAR,CAbZ;AAcE,oBAAA,IAAI,EAAErE,GAAG,CAACqE,KAAD,EAAQ,MAAR,CAdX;AAeE,oBAAA,QAAQ,EAAE,KAAKpC,YAfjB;AAgBE,oBAAA,WAAW,EAAEjC,GAAG,CAACqE,KAAD,EAAQ,aAAR,CAhBlB;AAiBE,oBAAA,IAAI,EAAErE,GAAG,CAACqE,KAAD,EAAQ,MAAR,CAjBX;AAkBE,oBAAA,WAAW,EAAE;AAAEE,sBAAAA,QAAQ,EAAE;AAAZ,qBAlBf;AAmBE,oBAAA,KAAK,EAAEvE,GAAG,CAAC,KAAKe,KAAL,CAAWC,KAAZ,EAAmBhB,GAAG,CAACqE,KAAD,EAAQ,MAAR,CAAtB,EAAuC,EAAvC;AAnBZ,qBAYOrE,GAAG,CAACqE,KAAD,EAAQ,MAAR,CAZV;AAAA;AAAA;AAAA;AAAA,0BADE,CADN,eAwBE;AAAK,oBAAA,SAAS,EAAC,2BAAf;AAAA,2CAEE;AAAO,sBAAA,KAAK,EAAC,iBAAb;AAA+B,sBAAA,IAAI,EAAC,QAApC;AAA6C,sBAAA,KAAK,EAAC,SAAnD;AAA6D,sBAAA,KAAK,EAAE;AAAEG,wBAAAA,KAAK,EAAE;AAAT;AAApE;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,0BAxBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBATF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAfF,eA0DE;AAAK,YAAA,SAAS,EAAC,eAAf;AAAA,sBAAgC,KAAKd,UAAL;AAAhC;AAAA;AAAA;AAAA;AAAA,kBA1DF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YADF;AAkED;;AAnLoC;;AAsLvC7C,QAAQ,CAAC4D,YAAT,GAAwB,EAAxB;AACA5D,QAAQ,CAAC6D,SAAT,GAAqB;AACnB7C,EAAAA,QAAQ,EAAE/B,SAAS,CAAC6E,MAAV,CAAiBC,UADR;AAEnBtD,EAAAA,KAAK,EAAExB,SAAS,CAAC6E,MAAV,CAAiBC;AAFL,CAArB;AAOA,eAAehE,OAAO,CAAC,IAAD,EAAO;AAAEF,EAAAA;AAAF,CAAP,CAAP,CAA2BG,QAA3B,CAAf","sourcesContent":["/**\r\n *\r\n * AuthPage\r\n *\r\n */\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { findIndex, get, map, replace, set } from 'lodash';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport FormDivider from '../../components/Login/FormDivider';\r\nimport Input from '../../components/Login/InputsIndex';\r\nimport SocialLink from '../../components/Login/SocialLink';\r\n\r\n// Utils\r\nimport auth from '../../utils/auth';\r\nimport request from '../../utils/request';\r\nimport { addUser } from '../../conection/profile/actions';\r\n\r\nimport form from './forms.json';\r\nimport './styles.css';\r\nimport { connect } from 'react-redux';\r\n\r\nclass AuthPage extends React.Component {\r\n  state = { value: {}, errors: [], didCheckErrors: false };\r\n\r\n  componentDidMount() {\r\n    this.generateForm(this.props);\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.match.params.authType !== this.props.match.params.authType) {\r\n      this.generateForm(nextProps);\r\n    }\r\n  }\r\n\r\n  getRequestURL = () => {\r\n    let requestURL;\r\n\r\n    switch (this.props.match.params.authType) {\r\n      case 'login':\r\n        requestURL = process.env.REACT_APP_SERVER_URL+'/auth/local';\r\n        break;\r\n      case 'reset-password':\r\n        requestURL = process.env.REACT_APP_SERVER_URL+'/auth/reset-password';\r\n        break;\r\n      case 'forgot-password':\r\n        requestURL = process.env.REACT_APP_SERVER_URL+'/auth/forgot-password';\r\n        break;\r\n      default:\r\n    }\r\n\r\n    return requestURL;\r\n  };\r\n\r\n  generateForm = props => {\r\n    const params = props.location.search\r\n      ? replace(props.location.search, '?code=', '')\r\n      : props.match.params.id;\r\n    this.setForm(props.match.params.authType, params);\r\n  };\r\n\r\n  handleChange = ({ target }) =>\r\n    this.setState({\r\n      value: { ...this.state.value, [target.name]: target.value },\r\n    });\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const body = this.state.value;\r\n    const requestURL = this.getRequestURL();\r\n\r\n    // This line is required for the callback url to redirect your user to app\r\n    if (this.props.match.params.authType === 'forgot-password') {\r\n      set(body, 'url', process.env.REACT_APP_APP_URL + '/auth/reset-password');\r\n    }\r\n\r\n    request(requestURL, { method: 'POST', body: this.state.value })\r\n      .then(response => {\r\n        auth.setToken(response.jwt, body.rememberMe);\r\n        auth.setUserInfo(response.user, body.rememberMe);\r\n        auth.setHeaderAuthorization(response.jwt);\r\n        this.props.addUser(response.user)\r\n        this.redirectUser();\r\n      })\r\n      .catch(err => {\r\n        // TODO handle errors for other views\r\n        // This is just an example\r\n        const errors = [\r\n          { name: 'identifier', errors: ['Email ou password errada'] },\r\n        ];\r\n        this.setState({ didCheckErrors: !this.state.didCheckErrors, errors });\r\n      });\r\n  };\r\n\r\n  redirectUser = () => {\r\n    this.props.history.push('/home-page-adm');\r\n  };\r\n\r\n  /**\r\n   * Function that allows to set the value to be modified\r\n   * @param {String} formType the auth view type ex: login\r\n   * @param {String} email    Optionnal\r\n   */\r\n  setForm = (formType, email) => {\r\n    const value = get(form, ['data', formType], {});\r\n\r\n    if (formType === 'reset-password') {\r\n      set(value, 'code', email);\r\n    }\r\n    this.setState({ value });\r\n  };\r\n\r\n  /**\r\n   * Check the URL's params to render the appropriate links\r\n   * @return {Element} Returns navigation links\r\n   */\r\n  renderLink = () => {\r\n    if (this.props.match.params.authType === 'login') {\r\n      return (\r\n        <div>\r\n          <Link to=\"/auth/forgot-password\">Esqueceu sua Senha?</Link>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  };\r\n\r\n  render() {\r\n    const divStyle =\r\n      this.props.match.params.authType === 'register'\r\n        ? { marginTop: '3.2rem' }\r\n        : { marginTop: '.9rem' };\r\n    const inputs = get(form, ['views', this.props.match.params.authType]);\r\n    const providers = []; // To remove a provider from the list just delete it from this array...\r\n\r\n    return (\r\n      <div>\r\n      <div className=\"authPage\">\r\n        <div className=\"wrapper\">\r\n          <div className=\"headerContainer\">\r\n            {this.props.match.params.authType === 'register' ? (\r\n              <span>Bem Vindo !</span>\r\n            ) : (\r\n              <h1>Entrar</h1>\r\n            )}\r\n          </div>\r\n          <div className=\"headerDescription\">\r\n            {this.props.match.params.authType === 'register' ? (\r\n              <span>Por favor registe para poder ter acesso as informações</span>\r\n            ) : (\r\n              ''\r\n            )}\r\n          </div>\r\n          <div className=\"formContainer\" style={divStyle}>\r\n            <div className=\"container-fluid\">\r\n              <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                  {providers.map(provider => (\r\n                    <SocialLink provider={provider} key={provider} />\r\n                  ))}\r\n                </div>\r\n              </div>\r\n              <FormDivider />\r\n              <form onSubmit={this.handleSubmit}>\r\n                <div className=\"row\" style={{ textAlign: 'start' }}>\r\n                  {map(inputs, (input, key) => (\r\n                    <Input\r\n                      autoFocus={key === 0}\r\n                      customBootstrapClass={get(input, 'customBootstrapClass')}\r\n                      didCheckErrors={this.state.didCheckErrors}\r\n                      errors={get(\r\n                        this.state.errors,\r\n                        [\r\n                          findIndex(this.state.errors, ['name', input.name]),\r\n                          'errors',\r\n                        ],\r\n                        []\r\n                      )}\r\n                      key={get(input, 'name')}\r\n                      label={get(input, 'label')}\r\n                      name={get(input, 'name')}\r\n                      onChange={this.handleChange}\r\n                      placeholder={get(input, 'placeholder')}\r\n                      type={get(input, 'type')}\r\n                      validations={{ required: true }}\r\n                      value={get(this.state.value, get(input, 'name'), '')}\r\n                    />\r\n                  ))}\r\n                  <div className=\"col-md-12 buttonContainer\">\r\n                    \r\n                    <input class=\"btn btn-primary\" type=\"submit\" value=\"Sign in\" style={{ width: '100%' }}/>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n          <div className=\"linkContainer\">{this.renderLink()}</div>\r\n        </div>\r\n      </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nAuthPage.defaultProps = {};\r\nAuthPage.propTypes = {\r\n  location: PropTypes.object.isRequired,\r\n  match: PropTypes.object.isRequired,\r\n};\r\n\r\n\r\n\r\nexport default connect(null, { addUser })(AuthPage);\r\n"]},"metadata":{},"sourceType":"module"}