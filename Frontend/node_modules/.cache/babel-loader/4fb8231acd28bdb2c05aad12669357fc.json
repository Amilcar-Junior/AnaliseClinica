{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amilc\\\\Documents\\\\GitHub\\\\AnaliseClinica\\\\Frontend\\\\src\\\\components\\\\Login\\\\InputTextWithErrors\\\\index.js\";\n\n/* eslint-disable no-mixed-operators */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { isEmpty, isFunction } from 'lodash';\nimport cn from 'classnames'; // Design\n\nimport Label from '../Label';\nimport InputDescription from '../InputDescription';\nimport InputErrors from '../InputErrors';\nimport InputText from '../InputText'; // Utils\n\nimport validateInput from '../../../utils/inputsValidations';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass InputTextWithErrors extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      errors: [],\n      hasInitialValue: false\n    };\n\n    this.handleBlur = ({\n      target\n    }) => {\n      // Prevent from displaying error if the input is initially isEmpty\n      if (!isEmpty(target.value) || this.state.hasInitialValue) {\n        const errors = validateInput(target.value, this.props.validations);\n        this.setState({\n          errors,\n          hasInitialValue: true\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    const {\n      value,\n      errors\n    } = this.props; // Prevent the input from displaying an error when the user enters and leaves without filling it\n\n    if (!isEmpty(value)) {\n      this.setState({\n        hasInitialValue: true\n      });\n    } // Display input error if it already has some\n\n\n    if (!isEmpty(errors)) {\n      this.setState({\n        errors\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // Show required error if the input's value is received after the compo is mounted\n    if (!isEmpty(nextProps.value) && !this.state.hasInitialValue) {\n      this.setState({\n        hasInitialValue: true\n      });\n    } // Check if errors have been updated during validations\n\n\n    if (nextProps.didCheckErrors !== this.props.didCheckErrors) {\n      // Remove from the state the errors that have already been set\n      const errors = isEmpty(nextProps.errors) ? [] : nextProps.errors;\n      this.setState({\n        errors\n      });\n    }\n  }\n  /**\r\n   * Set the errors depending on the validations given to the input\r\n   * @param  {Object} target\r\n   */\n\n\n  render() {\n    const {\n      autoFocus,\n      className,\n      customBootstrapClass,\n      deactivateErrorHighlight,\n      disabled,\n      errorsClassName,\n      errorsStyle,\n      inputClassName,\n      inputDescription,\n      inputDescriptionClassName,\n      inputDescriptionStyle,\n      inputStyle,\n      label,\n      labelClassName,\n      labelStyle,\n      name,\n      noErrorsDescription,\n      onBlur,\n      onChange,\n      onFocus,\n      placeholder,\n      style,\n      tabIndex,\n      value\n    } = this.props;\n    const handleBlur = isFunction(onBlur) ? onBlur : this.handleBlur;\n    let spacer = !isEmpty(inputDescription) ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spacer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this);\n\n    if (!noErrorsDescription && !isEmpty(this.state.errors)) {\n      spacer = /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 16\n      }, this);\n    }\n\n    const lStyle = !isEmpty(labelStyle) ? labelStyle : {\n      marginTop: '3px'\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cn('inputTextWithErrors', customBootstrapClass, !isEmpty(className) && className),\n      style: style,\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        className: labelClassName,\n        htmlFor: name,\n        message: label,\n        style: lStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputText, {\n        autoFocus: autoFocus,\n        className: inputClassName,\n        disabled: disabled,\n        deactivateErrorHighlight: deactivateErrorHighlight,\n        error: !isEmpty(this.state.errors),\n        name: name,\n        onBlur: handleBlur,\n        onChange: onChange,\n        onFocus: onFocus,\n        placeholder: placeholder,\n        style: inputStyle,\n        tabIndex: tabIndex,\n        value: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputDescription, {\n        className: inputDescriptionClassName,\n        message: inputDescription,\n        style: inputDescriptionStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputErrors, {\n        className: errorsClassName,\n        errors: !noErrorsDescription && this.state.errors || [],\n        style: errorsStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), spacer]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nInputTextWithErrors.defaultProps = {\n  autoFocus: false,\n  className: '',\n  customBootstrapClass: 'col-md-6',\n  deactivateErrorHighlight: false,\n  didCheckErrors: false,\n  disabled: false,\n  onBlur: false,\n  onFocus: () => {},\n  errors: [],\n  errorsClassName: '',\n  errorsStyle: {},\n  inputClassName: '',\n  inputDescription: '',\n  inputDescriptionClassName: '',\n  inputDescriptionStyle: {},\n  inputStyle: {},\n  label: '',\n  labelClassName: '',\n  labelStyle: {},\n  noErrorsDescription: false,\n  placeholder: '',\n  style: {},\n  tabIndex: '0',\n  validations: {}\n};\nInputTextWithErrors.propTypes = {\n  autoFocus: PropTypes.bool,\n  className: PropTypes.string,\n  customBootstrapClass: PropTypes.string,\n  deactivateErrorHighlight: PropTypes.bool,\n  didCheckErrors: PropTypes.bool,\n  disabled: PropTypes.bool,\n  errors: PropTypes.array,\n  errorsClassName: PropTypes.string,\n  errorsStyle: PropTypes.object,\n  inputClassName: PropTypes.string,\n  inputDescription: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.shape({\n    id: PropTypes.string,\n    params: PropTypes.object\n  })]),\n  inputDescriptionClassName: PropTypes.string,\n  inputDescriptionStyle: PropTypes.object,\n  inputStyle: PropTypes.object,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.shape({\n    id: PropTypes.string,\n    params: PropTypes.object\n  })]),\n  labelClassName: PropTypes.string,\n  labelStyle: PropTypes.object,\n  name: PropTypes.string.isRequired,\n  noErrorsDescription: PropTypes.bool,\n  onBlur: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n  onChange: PropTypes.func.isRequired,\n  onFocus: PropTypes.func,\n  placeholder: PropTypes.string,\n  style: PropTypes.object,\n  tabIndex: PropTypes.string,\n  validations: PropTypes.object,\n  value: PropTypes.string.isRequired\n};\nexport default InputTextWithErrors;","map":{"version":3,"sources":["C:/Users/amilc/Documents/GitHub/AnaliseClinica/Frontend/src/components/Login/InputTextWithErrors/index.js"],"names":["React","PropTypes","isEmpty","isFunction","cn","Label","InputDescription","InputErrors","InputText","validateInput","InputTextWithErrors","Component","state","errors","hasInitialValue","handleBlur","target","value","props","validations","setState","componentDidMount","componentWillReceiveProps","nextProps","didCheckErrors","render","autoFocus","className","customBootstrapClass","deactivateErrorHighlight","disabled","errorsClassName","errorsStyle","inputClassName","inputDescription","inputDescriptionClassName","inputDescriptionStyle","inputStyle","label","labelClassName","labelStyle","name","noErrorsDescription","onBlur","onChange","onFocus","placeholder","style","tabIndex","spacer","lStyle","marginTop","defaultProps","propTypes","bool","string","array","object","oneOfType","func","shape","id","params","isRequired"],"mappings":"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","sourcesContent":["/* eslint-disable no-mixed-operators */\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { isEmpty, isFunction } from 'lodash';\r\nimport cn from 'classnames';\r\n\r\n// Design\r\nimport Label from '../Label';\r\nimport InputDescription from '../InputDescription';\r\nimport InputErrors from '../InputErrors';\r\nimport InputText from '../InputText';\r\n\r\n// Utils\r\nimport validateInput from '../../../utils/inputsValidations';\r\n\r\nimport './styles.css';\r\n\r\nclass InputTextWithErrors extends React.Component {\r\n  // eslint-disable-line react/prefer-stateless-function\r\n  state = { errors: [], hasInitialValue: false };\r\n\r\n  componentDidMount() {\r\n    const { value, errors } = this.props;\r\n\r\n    // Prevent the input from displaying an error when the user enters and leaves without filling it\r\n    if (!isEmpty(value)) {\r\n      this.setState({ hasInitialValue: true });\r\n    }\r\n\r\n    // Display input error if it already has some\r\n    if (!isEmpty(errors)) {\r\n      this.setState({ errors });\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    // Show required error if the input's value is received after the compo is mounted\r\n    if (!isEmpty(nextProps.value) && !this.state.hasInitialValue) {\r\n      this.setState({ hasInitialValue: true });\r\n    }\r\n\r\n    // Check if errors have been updated during validations\r\n    if (nextProps.didCheckErrors !== this.props.didCheckErrors) {\r\n      // Remove from the state the errors that have already been set\r\n      const errors = isEmpty(nextProps.errors) ? [] : nextProps.errors;\r\n      this.setState({ errors });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the errors depending on the validations given to the input\r\n   * @param  {Object} target\r\n   */\r\n  handleBlur = ({ target }) => {\r\n    // Prevent from displaying error if the input is initially isEmpty\r\n    if (!isEmpty(target.value) || this.state.hasInitialValue) {\r\n      const errors = validateInput(target.value, this.props.validations);\r\n      this.setState({ errors, hasInitialValue: true });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      autoFocus,\r\n      className,\r\n      customBootstrapClass,\r\n      deactivateErrorHighlight,\r\n      disabled,\r\n      errorsClassName,\r\n      errorsStyle,\r\n      inputClassName,\r\n      inputDescription,\r\n      inputDescriptionClassName,\r\n      inputDescriptionStyle,\r\n      inputStyle,\r\n      label,\r\n      labelClassName,\r\n      labelStyle,\r\n      name,\r\n      noErrorsDescription,\r\n      onBlur,\r\n      onChange,\r\n      onFocus,\r\n      placeholder,\r\n      style,\r\n      tabIndex,\r\n      value,\r\n    } = this.props;\r\n    const handleBlur = isFunction(onBlur) ? onBlur : this.handleBlur;\r\n\r\n    let spacer = !isEmpty(inputDescription) ? (\r\n      <div className=\"spacer\" />\r\n    ) : (\r\n      <div />\r\n    );\r\n\r\n    if (!noErrorsDescription && !isEmpty(this.state.errors)) {\r\n      spacer = <div />;\r\n    }\r\n\r\n    const lStyle = !isEmpty(labelStyle) ? labelStyle : { marginTop: '3px' };\r\n\r\n    return (\r\n      <div\r\n        className={cn(\r\n          'inputTextWithErrors',\r\n          customBootstrapClass,\r\n          !isEmpty(className) && className\r\n        )}\r\n        style={style}\r\n      >\r\n        <Label\r\n          className={labelClassName}\r\n          htmlFor={name}\r\n          message={label}\r\n          style={lStyle}\r\n        />\r\n        <InputText\r\n          autoFocus={autoFocus}\r\n          className={inputClassName}\r\n          disabled={disabled}\r\n          deactivateErrorHighlight={deactivateErrorHighlight}\r\n          error={!isEmpty(this.state.errors)}\r\n          name={name}\r\n          onBlur={handleBlur}\r\n          onChange={onChange}\r\n          onFocus={onFocus}\r\n          placeholder={placeholder}\r\n          style={inputStyle}\r\n          tabIndex={tabIndex}\r\n          value={value}\r\n        />\r\n        <InputDescription\r\n          className={inputDescriptionClassName}\r\n          message={inputDescription}\r\n          style={inputDescriptionStyle}\r\n        />\r\n        <InputErrors\r\n          className={errorsClassName}\r\n          errors={(!noErrorsDescription && this.state.errors) || []}\r\n          style={errorsStyle}\r\n        />\r\n        {spacer}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nInputTextWithErrors.defaultProps = {\r\n  autoFocus: false,\r\n  className: '',\r\n  customBootstrapClass: 'col-md-6',\r\n  deactivateErrorHighlight: false,\r\n  didCheckErrors: false,\r\n  disabled: false,\r\n  onBlur: false,\r\n  onFocus: () => {},\r\n  errors: [],\r\n  errorsClassName: '',\r\n  errorsStyle: {},\r\n  inputClassName: '',\r\n  inputDescription: '',\r\n  inputDescriptionClassName: '',\r\n  inputDescriptionStyle: {},\r\n  inputStyle: {},\r\n  label: '',\r\n  labelClassName: '',\r\n  labelStyle: {},\r\n  noErrorsDescription: false,\r\n  placeholder: '',\r\n  style: {},\r\n  tabIndex: '0',\r\n  validations: {},\r\n};\r\n\r\nInputTextWithErrors.propTypes = {\r\n  autoFocus: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  customBootstrapClass: PropTypes.string,\r\n  deactivateErrorHighlight: PropTypes.bool,\r\n  didCheckErrors: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n  errors: PropTypes.array,\r\n  errorsClassName: PropTypes.string,\r\n  errorsStyle: PropTypes.object,\r\n  inputClassName: PropTypes.string,\r\n  inputDescription: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.func,\r\n    PropTypes.shape({\r\n      id: PropTypes.string,\r\n      params: PropTypes.object,\r\n    }),\r\n  ]),\r\n  inputDescriptionClassName: PropTypes.string,\r\n  inputDescriptionStyle: PropTypes.object,\r\n  inputStyle: PropTypes.object,\r\n  label: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.func,\r\n    PropTypes.shape({\r\n      id: PropTypes.string,\r\n      params: PropTypes.object,\r\n    }),\r\n  ]),\r\n  labelClassName: PropTypes.string,\r\n  labelStyle: PropTypes.object,\r\n  name: PropTypes.string.isRequired,\r\n  noErrorsDescription: PropTypes.bool,\r\n  onBlur: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\r\n  onChange: PropTypes.func.isRequired,\r\n  onFocus: PropTypes.func,\r\n  placeholder: PropTypes.string,\r\n  style: PropTypes.object,\r\n  tabIndex: PropTypes.string,\r\n  validations: PropTypes.object,\r\n  value: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default InputTextWithErrors;\r\n"]},"metadata":{},"sourceType":"module"}