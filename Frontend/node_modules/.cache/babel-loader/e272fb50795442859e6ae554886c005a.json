{"ast":null,"code":"import { isEmpty } from 'lodash';\nimport { addUser } from '../conection/profile/actions';\nimport http from \"../http\";\nconst TOKEN_KEY = 'jwtToken';\nconst USER_INFO = 'userInfo';\nconst parse = JSON.parse;\nconst stringify = JSON.stringify;\nconst auth = {\n  /**\r\n   * Remove an item from the used storage\r\n   * @param  {String} key [description]\r\n   */\n  clear(key) {\n    if (localStorage && localStorage.getItem(key)) {\n      return localStorage.removeItem(key);\n    }\n\n    if (sessionStorage && sessionStorage.getItem(key)) {\n      return sessionStorage.removeItem(key);\n    }\n\n    return null;\n  },\n\n  /**\r\n   * Clear all app storage\r\n   */\n  clearAppStorage() {\n    if (localStorage) {\n      localStorage.clear();\n    }\n\n    if (sessionStorage) {\n      sessionStorage.clear();\n    }\n  },\n\n  clearToken(tokenKey = TOKEN_KEY) {\n    return auth.clear(tokenKey);\n  },\n\n  clearUserInfo(userInfo = USER_INFO) {\n    return auth.clear(userInfo);\n  },\n\n  /**\r\n   * Returns data from storage\r\n   * @param  {String} key Item to get from the storage\r\n   * @return {String|Object}     Data from the storage\r\n   */\n  get(key) {\n    if (localStorage && localStorage.getItem(key)) {\n      return parse(localStorage.getItem(key)) || null;\n    }\n\n    if (sessionStorage && sessionStorage.getItem(key)) {\n      return parse(sessionStorage.getItem(key)) || null;\n    }\n\n    return null;\n  },\n\n  getToken(tokenKey = TOKEN_KEY) {\n    return auth.get(tokenKey);\n  },\n\n  getUserInfo(userInfo = USER_INFO) {\n    return auth.get(userInfo);\n  },\n\n  /**\r\n   * Set data in storage\r\n   * @param {String|Object}  value    The data to store\r\n   * @param {String}  key\r\n   * @param {Boolean} isLocalStorage  Defines if we need to store in localStorage or sessionStorage\r\n   */\n  set(value, key, isLocalStorage) {\n    if (isEmpty(value)) {\n      return null;\n    }\n\n    if (isLocalStorage && localStorage) {\n      return localStorage.setItem(key, stringify(value));\n    }\n\n    if (sessionStorage) {\n      return sessionStorage.setItem(key, stringify(value));\n    }\n\n    return null;\n  },\n\n  setToken(value = '', isLocalStorage = false, tokenKey = TOKEN_KEY) {\n    return auth.set(value, tokenKey, isLocalStorage);\n  },\n\n  setUserInfo(value = '', isLocalStorage = false, userInfo = USER_INFO) {\n    return auth.set(value, userInfo, isLocalStorage);\n  },\n\n  setHeaderAuthorization(token) {\n    http.defaults.headers.common.Authorization = `Bearer ${token}`;\n  }\n\n};\nexport default auth;","map":{"version":3,"sources":["C:/Users/amilc/Documents/GitHub/AnaliseClinica/Frontend/src/utils/auth.js"],"names":["isEmpty","addUser","http","TOKEN_KEY","USER_INFO","parse","JSON","stringify","auth","clear","key","localStorage","getItem","removeItem","sessionStorage","clearAppStorage","clearToken","tokenKey","clearUserInfo","userInfo","get","getToken","getUserInfo","set","value","isLocalStorage","setItem","setToken","setUserInfo","setHeaderAuthorization","token","defaults","headers","common","Authorization"],"mappings":"AAAA,SAASA,OAAT,QAAwB,QAAxB;AACA,SAASC,OAAT,QAAwB,8BAAxB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AAEA,MAAMC,SAAS,GAAG,UAAlB;AACA,MAAMC,SAAS,GAAG,UAAlB;AAEA,MAAMC,KAAK,GAAGC,IAAI,CAACD,KAAnB;AACA,MAAME,SAAS,GAAGD,IAAI,CAACC,SAAvB;AAEA,MAAMC,IAAI,GAAG;AACX;AACF;AACA;AACA;AACEC,EAAAA,KAAK,CAACC,GAAD,EAAM;AACT,QAAIC,YAAY,IAAIA,YAAY,CAACC,OAAb,CAAqBF,GAArB,CAApB,EAA+C;AAC7C,aAAOC,YAAY,CAACE,UAAb,CAAwBH,GAAxB,CAAP;AACD;;AAED,QAAII,cAAc,IAAIA,cAAc,CAACF,OAAf,CAAuBF,GAAvB,CAAtB,EAAmD;AACjD,aAAOI,cAAc,CAACD,UAAf,CAA0BH,GAA1B,CAAP;AACD;;AAED,WAAO,IAAP;AACD,GAfU;;AAiBX;AACF;AACA;AACEK,EAAAA,eAAe,GAAG;AAChB,QAAIJ,YAAJ,EAAkB;AAChBA,MAAAA,YAAY,CAACF,KAAb;AACD;;AAED,QAAIK,cAAJ,EAAoB;AAClBA,MAAAA,cAAc,CAACL,KAAf;AACD;AACF,GA5BU;;AA8BXO,EAAAA,UAAU,CAACC,QAAQ,GAAGd,SAAZ,EAAuB;AAC/B,WAAOK,IAAI,CAACC,KAAL,CAAWQ,QAAX,CAAP;AACD,GAhCU;;AAkCXC,EAAAA,aAAa,CAACC,QAAQ,GAAGf,SAAZ,EAAuB;AAClC,WAAOI,IAAI,CAACC,KAAL,CAAWU,QAAX,CAAP;AACD,GApCU;;AAsCX;AACF;AACA;AACA;AACA;AACEC,EAAAA,GAAG,CAACV,GAAD,EAAM;AACP,QAAIC,YAAY,IAAIA,YAAY,CAACC,OAAb,CAAqBF,GAArB,CAApB,EAA+C;AAC7C,aAAOL,KAAK,CAACM,YAAY,CAACC,OAAb,CAAqBF,GAArB,CAAD,CAAL,IAAoC,IAA3C;AACD;;AAED,QAAII,cAAc,IAAIA,cAAc,CAACF,OAAf,CAAuBF,GAAvB,CAAtB,EAAmD;AACjD,aAAOL,KAAK,CAACS,cAAc,CAACF,OAAf,CAAuBF,GAAvB,CAAD,CAAL,IAAsC,IAA7C;AACD;;AAED,WAAO,IAAP;AACD,GArDU;;AAuDXW,EAAAA,QAAQ,CAACJ,QAAQ,GAAGd,SAAZ,EAAuB;AAC7B,WAAOK,IAAI,CAACY,GAAL,CAASH,QAAT,CAAP;AACD,GAzDU;;AA2DXK,EAAAA,WAAW,CAACH,QAAQ,GAAGf,SAAZ,EAAuB;AAChC,WAAOI,IAAI,CAACY,GAAL,CAASD,QAAT,CAAP;AACD,GA7DU;;AA+DX;AACF;AACA;AACA;AACA;AACA;AACEI,EAAAA,GAAG,CAACC,KAAD,EAAQd,GAAR,EAAae,cAAb,EAA6B;AAC9B,QAAIzB,OAAO,CAACwB,KAAD,CAAX,EAAoB;AAClB,aAAO,IAAP;AACD;;AAED,QAAIC,cAAc,IAAId,YAAtB,EAAoC;AAClC,aAAOA,YAAY,CAACe,OAAb,CAAqBhB,GAArB,EAA0BH,SAAS,CAACiB,KAAD,CAAnC,CAAP;AACD;;AAED,QAAIV,cAAJ,EAAoB;AAClB,aAAOA,cAAc,CAACY,OAAf,CAAuBhB,GAAvB,EAA4BH,SAAS,CAACiB,KAAD,CAArC,CAAP;AACD;;AAED,WAAO,IAAP;AACD,GAnFU;;AAqFXG,EAAAA,QAAQ,CAACH,KAAK,GAAG,EAAT,EAAaC,cAAc,GAAG,KAA9B,EAAqCR,QAAQ,GAAGd,SAAhD,EAA2D;AACjE,WAAOK,IAAI,CAACe,GAAL,CAASC,KAAT,EAAgBP,QAAhB,EAA0BQ,cAA1B,CAAP;AACD,GAvFU;;AAyFXG,EAAAA,WAAW,CAACJ,KAAK,GAAG,EAAT,EAAaC,cAAc,GAAG,KAA9B,EAAqCN,QAAQ,GAAGf,SAAhD,EAA2D;AACpE,WAAOI,IAAI,CAACe,GAAL,CAASC,KAAT,EAAgBL,QAAhB,EAA0BM,cAA1B,CAAP;AACD,GA3FU;;AA+FXI,EAAAA,sBAAsB,CAACC,KAAD,EAAQ;AAC5B5B,IAAAA,IAAI,CAAC6B,QAAL,CAAcC,OAAd,CAAsBC,MAAtB,CAA6BC,aAA7B,GAA8C,UAASJ,KAAM,EAA7D;AACD;;AAjGU,CAAb;AAoGA,eAAetB,IAAf","sourcesContent":["import { isEmpty } from 'lodash';\r\nimport { addUser } from '../conection/profile/actions';\r\nimport http from \"../http\";\r\n\r\nconst TOKEN_KEY = 'jwtToken';\r\nconst USER_INFO = 'userInfo';\r\n\r\nconst parse = JSON.parse;\r\nconst stringify = JSON.stringify;\r\n\r\nconst auth = {\r\n  /**\r\n   * Remove an item from the used storage\r\n   * @param  {String} key [description]\r\n   */\r\n  clear(key) {\r\n    if (localStorage && localStorage.getItem(key)) {\r\n      return localStorage.removeItem(key);\r\n    }\r\n\r\n    if (sessionStorage && sessionStorage.getItem(key)) {\r\n      return sessionStorage.removeItem(key);\r\n    }\r\n\r\n    return null;\r\n  },\r\n\r\n  /**\r\n   * Clear all app storage\r\n   */\r\n  clearAppStorage() {\r\n    if (localStorage) {\r\n      localStorage.clear();\r\n    }\r\n\r\n    if (sessionStorage) {\r\n      sessionStorage.clear();\r\n    }\r\n  },\r\n\r\n  clearToken(tokenKey = TOKEN_KEY) {\r\n    return auth.clear(tokenKey);\r\n  },\r\n\r\n  clearUserInfo(userInfo = USER_INFO) {\r\n    return auth.clear(userInfo);\r\n  },\r\n\r\n  /**\r\n   * Returns data from storage\r\n   * @param  {String} key Item to get from the storage\r\n   * @return {String|Object}     Data from the storage\r\n   */\r\n  get(key) {\r\n    if (localStorage && localStorage.getItem(key)) {\r\n      return parse(localStorage.getItem(key)) || null;\r\n    }\r\n\r\n    if (sessionStorage && sessionStorage.getItem(key)) {\r\n      return parse(sessionStorage.getItem(key)) || null;\r\n    }\r\n\r\n    return null;\r\n  },\r\n\r\n  getToken(tokenKey = TOKEN_KEY) {\r\n    return auth.get(tokenKey);\r\n  },\r\n\r\n  getUserInfo(userInfo = USER_INFO) {\r\n    return auth.get(userInfo);\r\n  },\r\n\r\n  /**\r\n   * Set data in storage\r\n   * @param {String|Object}  value    The data to store\r\n   * @param {String}  key\r\n   * @param {Boolean} isLocalStorage  Defines if we need to store in localStorage or sessionStorage\r\n   */\r\n  set(value, key, isLocalStorage) {\r\n    if (isEmpty(value)) {\r\n      return null;\r\n    }\r\n\r\n    if (isLocalStorage && localStorage) {\r\n      return localStorage.setItem(key, stringify(value));\r\n    }\r\n\r\n    if (sessionStorage) {\r\n      return sessionStorage.setItem(key, stringify(value));\r\n    }\r\n\r\n    return null;\r\n  },\r\n\r\n  setToken(value = '', isLocalStorage = false, tokenKey = TOKEN_KEY) {\r\n    return auth.set(value, tokenKey, isLocalStorage);\r\n  },\r\n\r\n  setUserInfo(value = '', isLocalStorage = false, userInfo = USER_INFO) {\r\n    return auth.set(value, userInfo, isLocalStorage);\r\n  },\r\n\r\n  \r\n\r\n  setHeaderAuthorization(token) {\r\n    http.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  }\r\n};\r\n\r\nexport default auth;\r\n"]},"metadata":{},"sourceType":"module"}