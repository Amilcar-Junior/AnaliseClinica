{"ast":null,"code":"import 'whatwg-fetch';\nimport auth from './auth';\n/**\r\n * Parses the JSON returned by a network request\r\n *\r\n * @param  {object} response A response from a network request\r\n *\r\n * @return {object}          The parsed JSON from the request\r\n */\n\nfunction parseJSON(response) {\n  return response.json ? response.json() : response;\n}\n/**\r\n * Checks if a network request came back fine, and throws an error if not\r\n *\r\n * @param  {object} response   A response from a network request\r\n *\r\n * @return {object|undefined} Returns either the response, or throws an error\r\n */\n\n\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n\n  return parseJSON(response).then(responseFormatted => {\n    const error = new Error(response.statusText);\n    error.response = response;\n    error.response.payload = responseFormatted;\n    throw error;\n  });\n}\n/**\r\n * Format query params\r\n *\r\n * @param params\r\n * @returns {string}\r\n */\n\n\nfunction formatQueryParams(params) {\n  return Object.keys(params).map(k => `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`).join('&');\n}\n/**\r\n * Requests a URL, returning a promise\r\n *\r\n * @param  {string} url       The URL we want to request\r\n * @param  {object} [options] The options we want to pass to \"fetch\"\r\n *\r\n * @return {object}           The response data\r\n */\n\n\nexport default function request(url, options = {}, stringify = true) {\n  // Set headers\n  if (stringify) {\n    options.headers = Object.assign({\n      'Content-Type': 'application/json'\n    }, options.headers, {});\n  }\n\n  const token = auth.getToken();\n\n  if (token) {\n    options.headers = Object.assign({\n      Authorization: `Bearer ${token}`\n    }, options.headers);\n  }\n\n  if (options && options.params) {\n    const params = formatQueryParams(options.params);\n    url = `${url}?${params}`;\n  } // Stringify body object\n\n\n  if (options && options.body && stringify) {\n    options.body = JSON.stringify(options.body);\n  }\n\n  return fetch(url, options).then(checkStatus).then(parseJSON);\n}","map":{"version":3,"sources":["C:/Users/amilc/Documents/GitHub/AnaliseClinica/Frontend/src/utils/request.js"],"names":["auth","parseJSON","response","json","checkStatus","status","then","responseFormatted","error","Error","statusText","payload","formatQueryParams","params","Object","keys","map","k","encodeURIComponent","join","request","url","options","stringify","headers","assign","token","getToken","Authorization","body","JSON","fetch"],"mappings":"AAAA,OAAO,cAAP;AACA,OAAOA,IAAP,MAAiB,QAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,CAAmBC,QAAnB,EAA6B;AAC3B,SAAOA,QAAQ,CAACC,IAAT,GAAgBD,QAAQ,CAACC,IAAT,EAAhB,GAAkCD,QAAzC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,WAAT,CAAqBF,QAArB,EAA+B;AAC7B,MAAIA,QAAQ,CAACG,MAAT,IAAmB,GAAnB,IAA0BH,QAAQ,CAACG,MAAT,GAAkB,GAAhD,EAAqD;AACnD,WAAOH,QAAP;AACD;;AAED,SAAOD,SAAS,CAACC,QAAD,CAAT,CAAoBI,IAApB,CAAyBC,iBAAiB,IAAI;AACnD,UAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAUP,QAAQ,CAACQ,UAAnB,CAAd;AACAF,IAAAA,KAAK,CAACN,QAAN,GAAiBA,QAAjB;AACAM,IAAAA,KAAK,CAACN,QAAN,CAAeS,OAAf,GAAyBJ,iBAAzB;AACA,UAAMC,KAAN;AACD,GALM,CAAP;AAMD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,iBAAT,CAA2BC,MAA3B,EAAmC;AACjC,SAAOC,MAAM,CAACC,IAAP,CAAYF,MAAZ,EACJG,GADI,CACAC,CAAC,IAAK,GAAEC,kBAAkB,CAACD,CAAD,CAAI,IAAGC,kBAAkB,CAACL,MAAM,CAACI,CAAD,CAAP,CAAY,EAD/D,EAEJE,IAFI,CAEC,GAFD,CAAP;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASC,OAAT,CACbC,GADa,EAEbC,OAAO,GAAG,EAFG,EAGbC,SAAS,GAAG,IAHC,EAIb;AACA;AACA,MAAIA,SAAJ,EAAe;AAEbD,IAAAA,OAAO,CAACE,OAAR,GAAkBV,MAAM,CAACW,MAAP,CAChB;AACE,sBAAgB;AADlB,KADgB,EAIhBH,OAAO,CAACE,OAJQ,EAKhB,EALgB,CAAlB;AAOD;;AAED,QAAME,KAAK,GAAG1B,IAAI,CAAC2B,QAAL,EAAd;;AAEA,MAAID,KAAJ,EAAW;AACTJ,IAAAA,OAAO,CAACE,OAAR,GAAkBV,MAAM,CAACW,MAAP,CAChB;AACEG,MAAAA,aAAa,EAAG,UAASF,KAAM;AADjC,KADgB,EAIhBJ,OAAO,CAACE,OAJQ,CAAlB;AAMD;;AAED,MAAIF,OAAO,IAAIA,OAAO,CAACT,MAAvB,EAA+B;AAC7B,UAAMA,MAAM,GAAGD,iBAAiB,CAACU,OAAO,CAACT,MAAT,CAAhC;AACAQ,IAAAA,GAAG,GAAI,GAAEA,GAAI,IAAGR,MAAO,EAAvB;AACD,GA3BD,CA6BA;;;AACA,MAAIS,OAAO,IAAIA,OAAO,CAACO,IAAnB,IAA2BN,SAA/B,EAA0C;AACxCD,IAAAA,OAAO,CAACO,IAAR,GAAeC,IAAI,CAACP,SAAL,CAAeD,OAAO,CAACO,IAAvB,CAAf;AACD;;AAED,SAAOE,KAAK,CAACV,GAAD,EAAMC,OAAN,CAAL,CACJhB,IADI,CACCF,WADD,EAEJE,IAFI,CAECL,SAFD,CAAP;AAGD","sourcesContent":["import 'whatwg-fetch';\r\nimport auth from './auth';\r\n/**\r\n * Parses the JSON returned by a network request\r\n *\r\n * @param  {object} response A response from a network request\r\n *\r\n * @return {object}          The parsed JSON from the request\r\n */\r\nfunction parseJSON(response) {\r\n  return response.json ? response.json() : response;\r\n}\r\n\r\n/**\r\n * Checks if a network request came back fine, and throws an error if not\r\n *\r\n * @param  {object} response   A response from a network request\r\n *\r\n * @return {object|undefined} Returns either the response, or throws an error\r\n */\r\nfunction checkStatus(response) {\r\n  if (response.status >= 200 && response.status < 300) {\r\n    return response;\r\n  }\r\n\r\n  return parseJSON(response).then(responseFormatted => {\r\n    const error = new Error(response.statusText);\r\n    error.response = response;\r\n    error.response.payload = responseFormatted;\r\n    throw error;\r\n  });\r\n}\r\n\r\n/**\r\n * Format query params\r\n *\r\n * @param params\r\n * @returns {string}\r\n */\r\nfunction formatQueryParams(params) {\r\n  return Object.keys(params)\r\n    .map(k => `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`)\r\n    .join('&');\r\n}\r\n\r\n/**\r\n * Requests a URL, returning a promise\r\n *\r\n * @param  {string} url       The URL we want to request\r\n * @param  {object} [options] The options we want to pass to \"fetch\"\r\n *\r\n * @return {object}           The response data\r\n */\r\nexport default function request(\r\n  url,\r\n  options = {},\r\n  stringify = true\r\n) {\r\n  // Set headers\r\n  if (stringify) {\r\n\r\n    options.headers = Object.assign(\r\n      {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      options.headers,\r\n      {}\r\n    );\r\n  }\r\n\r\n  const token = auth.getToken();\r\n\r\n  if (token) {\r\n    options.headers = Object.assign(\r\n      {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      options.headers\r\n    );\r\n  }\r\n\r\n  if (options && options.params) {\r\n    const params = formatQueryParams(options.params);\r\n    url = `${url}?${params}`;\r\n  }\r\n\r\n  // Stringify body object\r\n  if (options && options.body && stringify) {\r\n    options.body = JSON.stringify(options.body);\r\n  }\r\n\r\n  return fetch(url, options)\r\n    .then(checkStatus)\r\n    .then(parseJSON);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}